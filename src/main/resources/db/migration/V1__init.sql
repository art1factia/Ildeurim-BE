-- ==========================================
-- V1__init.sql  (PostgreSQL, Flyway)
-- ==========================================

-- WORKER
CREATE TABLE worker (
                        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        name TEXT,
                        phone_number TEXT,
                        birthday DATE,
                        gender VARCHAR(32),
                        residence VARCHAR(64),
                        created_at TIMESTAMPTZ DEFAULT now(),
                        updated_at TIMESTAMPTZ DEFAULT now()
);

-- Worker BLG (ElementCollection<WorkPlace>)
CREATE TABLE workerBlgs (
                            workerId BIGINT NOT NULL REFERENCES worker(id) ON DELETE CASCADE,
                            blg VARCHAR(64) NOT NULL,
                            PRIMARY KEY(workerId, blg)
);

-- Worker job interests (ElementCollection<JobField>)
CREATE TABLE workerJobInterests (
                                    workerId BIGINT NOT NULL REFERENCES worker(id) ON DELETE CASCADE,
                                    jobField VARCHAR(64) NOT NULL,
                                    PRIMARY KEY(workerId, jobField)
);

-- CAREER
CREATE TABLE career (
                        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        workerId BIGINT NOT NULL REFERENCES worker(id) ON DELETE CASCADE,
                        title TEXT,
                        mainDuties TEXT,
                        companyName TEXT,
                        workplace VARCHAR(64),
                        isOpening BOOLEAN DEFAULT FALSE,
                        jobField VARCHAR(64),
                        startDate DATE,
                        endDate DATE,
                        created_at TIMESTAMPTZ DEFAULT now(),
                        updated_at TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX idx_career_worker ON career(workerId);

-- EMPLOYER
CREATE TABLE employer (
                          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          name TEXT,
                          email TEXT,
                          bossName TEXT,
                          phoneNumber TEXT,
                          companyName TEXT,
                          companyLocation TEXT,
                          companyNumber TEXT,
                          defaultQuestionList JSONB,
                          created_at TIMESTAMPTZ DEFAULT now(),
                          updated_at TIMESTAMPTZ DEFAULT now()
);

-- Employer job fields (ElementCollection<JobField>)
CREATE TABLE employerJobField (
                                  employerId BIGINT NOT NULL REFERENCES employer(id) ON DELETE CASCADE,
                                  jobField VARCHAR(64) NOT NULL,
                                  PRIMARY KEY(employerId, jobField)
);

-- JOB POST
CREATE TABLE job_post (
                          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          employerId BIGINT NOT NULL REFERENCES employer(id) ON DELETE CASCADE,
                          status VARCHAR(32),
                          title TEXT,
                          content TEXT,
                          workStartTime TIME,
                          workEndTime TIME,
                          workType VARCHAR(32),
                          workDaysCount INTEGER,
                          careerRequirement VARCHAR(32),
                          educationRequirement VARCHAR(32),
                          employmentType VARCHAR(32),
                          jobField VARCHAR(64),
                          expiryDate DATE,
                          workPlace VARCHAR(64),
                          questionList JSONB,
                          created_at TIMESTAMPTZ DEFAULT now(),
                          updated_at TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX idx_job_post_employer ON job_post(employerId);
CREATE INDEX idx_job_post_status_created ON job_post(status, created_at DESC);

-- JobPost work days (ElementCollection)
CREATE TABLE jobPostWorkDays (
                                 jobPostId BIGINT NOT NULL REFERENCES job_post(id) ON DELETE CASCADE,
                                 workDay VARCHAR(16) NOT NULL,
                                 PRIMARY KEY(jobPostId, workDay)
);

-- JobPost apply methods (ElementCollection<ApplyMethod>)
CREATE TABLE jobPostApplyMethods (
                                     jobPostId BIGINT NOT NULL REFERENCES job_post(id) ON DELETE CASCADE,
                                     applyMethod VARCHAR(32) NOT NULL,
                                     PRIMARY KEY(jobPostId, applyMethod)
);

-- JobPost job fields (ElementCollection<JobField>)
CREATE TABLE jobPostJobFields (
                                  jobPostId BIGINT NOT NULL REFERENCES job_post(id) ON DELETE CASCADE,
                                  jobField VARCHAR(64) NOT NULL,
                                  PRIMARY KEY(jobPostId, jobField)
);

-- APPLICATION
CREATE TABLE application (
                             id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                             jobPostId BIGINT NOT NULL REFERENCES job_post(id),
                             workerId BIGINT NOT NULL REFERENCES worker(id),
                             applicationStatus VARCHAR(32),
                             applyMethod VARCHAR(32),
                             submissionTime TIMESTAMPTZ,
                             answers JSONB,
                             created_at TIMESTAMPTZ DEFAULT now(),
                             updated_at TIMESTAMPTZ DEFAULT now(),
                             UNIQUE(jobPostId, workerId)
);
CREATE INDEX idx_application_job_post ON application(jobPostId);
CREATE INDEX idx_application_worker ON application(workerId);

-- JOB (one-to-one with Application, many-to-one Worker)
CREATE TABLE job (
                     id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                     applicationId BIGINT NOT NULL UNIQUE REFERENCES application(id),
                     workerId BIGINT NOT NULL REFERENCES worker(id) ON DELETE CASCADE,
                     created_at TIMESTAMPTZ DEFAULT now(),
                     updated_at TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX idx_job_worker ON job(workerId);

-- REVIEW
CREATE TABLE review (
                        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        workerId BIGINT NOT NULL REFERENCES worker(id),
                        employerId BIGINT NOT NULL REFERENCES employer(id),
                        created_at TIMESTAMPTZ DEFAULT now(),
                        updated_at TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX idx_review_worker ON review(workerId);
CREATE INDEX idx_review_employer ON review(employerId);

-- Review hashtags (ElementCollection<Hashtag>)
CREATE TABLE reviewHashtags (
                                reviewId BIGINT NOT NULL REFERENCES review(id) ON DELETE CASCADE,
                                hashtag VARCHAR(64) NOT NULL,
                                PRIMARY KEY(reviewId, hashtag)
);

-- Review answers (Map<EvaluationType, EvaluationAnswer>)
CREATE TABLE reviewAnswers (
                               reviewId BIGINT NOT NULL REFERENCES review(id) ON DELETE CASCADE,
                               evaluationType VARCHAR(64) NOT NULL,
                               answer INTEGER,
                               PRIMARY KEY(reviewId, evaluationType)
);

-- (선택) JSON 타입 안전장치
ALTER TABLE job_post
    ADD CONSTRAINT chk_jobpost_questionlist_json
        CHECK (questionList IS NULL OR jsonb_typeof(questionList) = 'array');

ALTER TABLE application
    ADD CONSTRAINT chk_application_answers_json
        CHECK (answers IS NULL OR jsonb_typeof(answers) IN ('array','object'));

-- (선택) JSONB GIN 인덱스 (JSON 내부 키로 검색할 일이 있다면)
CREATE INDEX IF NOT EXISTS idx_job_post_questionlist_gin ON job_post USING GIN (questionList);
CREATE INDEX IF NOT EXISTS idx_application_answers_gin     ON application USING GIN (answers);
