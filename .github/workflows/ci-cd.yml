name: CI-CD (Gradle, JDK17)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: prod-deploy
  cancel-in-progress: true

env:
  JDK_VERSION: '17'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Build (Gradle)
        run: |
          chmod +x gradlew
          ./gradlew --no-daemon clean test bootJar

      - name: Show build output (debug)
        run: ls -al build/libs

      - name: Locate artifact path
        id: artifact
        run: |
          JAR_PATH=$(ls -1 build/libs/*.jar | head -n1)
          if [ -z "$JAR_PATH" ]; then
            echo "No jar in build/libs"; exit 1
          fi
          echo "Found: $JAR_PATH"
          echo "jar=$JAR_PATH" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar            # 이 이름을 deploy에서도 동일하게 사용
          path: ${{ steps.artifact.outputs.jar }}
          if-no-files-found: error


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar          # build와 동일한 이름
          path: .                # 현재 워크스페이스로 다운로드

      - name: Show workspace after download (debug)
        run: |
          pwd
          ls -al
          find . -maxdepth 3 -type f -name "*.jar" -print

      - name: Normalize jar name (robust)
        run: |
          JAR=$(find . -type f -name "*.jar" | head -n1)
          if [ -z "$JAR" ]; then
            echo "No JAR found after artifact download!"; exit 1
          fi
          echo "Found JAR: $JAR"
          cp "$JAR" ./app.jar
          ls -al app.jar

      - name: Prepare application-prod.yml (placeholder)
        run: |
          cat > application-prod.yml << 'EOF'
          # prod config placeholder (values to be added later via secrets)
          EOF
          ls -al application-prod.yml

      - name: Ensure target dir exists on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            mkdir -p ${{ secrets.SERVER_APP_DIR }}
            chmod 755 ${{ secrets.SERVER_APP_DIR }}
            ls -al ${{ secrets.SERVER_APP_DIR }}
      - name: Show workspace (recursive debug)
        run: |
          pwd
          ls -al
          echo "---- tree (2 levels) ----"
          find . -maxdepth 2 -type f -print

      - name: Normalize jar into deploy folder
        run: |
          set -euo pipefail
          JAR=$(find . -type f -name "*.jar" -print | head -n1)
          if [ -z "${JAR:-}" ]; then
            echo "No JAR found after artifact download!"; exit 1
          fi
          echo "Found JAR at: $JAR"
          mkdir -p deploy
          cp -f "$JAR" deploy/app.jar
          ls -al deploy/app.jar
      

      - name: Verify files exist (fail fast)
        run: |
          set -euo pipefail
          for f in ./app.jar ./application-prod.yml; do
            if [ ! -s "$f" ]; then
              echo "Missing or empty: $f"; ls -al; exit 1
            fi
            echo "OK: $f"
          done
      

      - name: Copy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: |
            /github/workspace/deploy/app.jar
            /github/workspace/application-prod.yml
          target: ${{ secrets.SERVER_APP_DIR }}
          overwrite: true
          debug: true

      - name: Restart service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.SERVER_APP_DIR }}
            sudo systemctl restart ${{ secrets.SERVER_SERVICE }}
            sudo systemctl status  ${{ secrets.SERVER_SERVICE }} --no-pager -l

