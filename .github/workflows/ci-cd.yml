name: CI-CD (Gradle, JDK17)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: prod-deploy
  cancel-in-progress: true

env:
  JDK_VERSION: '17'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Build (Gradle)
        run: |
          chmod +x gradlew
          ./gradlew --no-daemon clean test bootJar

      - name: Show build output (debug)
        run: ls -al build/libs

      - name: Locate artifact path
        id: artifact
        run: |
          JAR_PATH=$(ls -1 build/libs/*.jar | head -n1)
          if [ -z "$JAR_PATH" ]; then
            echo "No jar in build/libs"; exit 1
          fi
          echo "Found: $JAR_PATH"
          echo "jar=$JAR_PATH" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar            # 이 이름을 deploy에서도 동일하게 사용
          path: ${{ steps.artifact.outputs.jar }}
          if-no-files-found: error


  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1) 빌드 아티팩트 다운로드 (build job에서 name: app-jar 로 업로드했던 것)
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: .

      # 2) 워크스페이스 점검 (경로 문제 디버그용)
      - name: Show workspace after download (debug)
        run: |
          pwd
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          ls -al
          find . -maxdepth 3 -type f -name "*.jar" -print

      # 3) JAR을 deploy/app.jar 로 정규화
      - name: Normalize jar into deploy folder
        run: |
          set -euo pipefail
          JAR=$(find . -type f -name "*.jar" -print | head -n1)
          if [ -z "${JAR:-}" ]; then
            echo "No JAR found after artifact download!"; exit 1
          fi
          echo "Found JAR at: $JAR"
          mkdir -p deploy
          # 이미 deploy/app.jar면 스킵
          if [ "$(realpath "$JAR")" = "$(realpath deploy/app.jar 2>/dev/null || echo _)" ]; then
            echo "Already normalized — skip copy"
          else
            cp -f "$JAR" deploy/app.jar
          fi
          ls -al deploy/

      # 4) prod yml (임시/자리표시자) 생성 — 나중에 Secrets로 값 채울 예정
      - name: Prepare application-prod.yml (placeholder)
        run: |
          mkdir -p deploy
          cat > deploy/application-prod.yml << 'EOF'
          # prod config placeholder (values to be added later via secrets)
          # 예) 추후:
          # spring:
          #   datasource:
          #     url: ${DB_URL}
          #     username: ${DB_USERNAME}
          #     password: ${DB_PASSWORD}
          # jwt:
          #   secret: ${JWT_SECRET}
          EOF
          ls -al deploy/

      # 5) 전송할 파일 존재/크기 검증 (없으면 여기서 실패시켜 원인 파악 쉬움)
      - name: Verify files exist (fail fast)
        run: |
          set -euo pipefail
          for f in deploy/app.jar deploy/application-prod.yml; do
            if [ ! -s "$f" ]; then
              echo "Missing or empty: $f"
              ls -al
              ls -al deploy || true
              exit 1
            fi
            echo "OK: $f"
          done

      # 6) 서버에 대상 디렉토리 보장 (필요시 SSH 포트 지정: port: 2222)
      - name: Ensure target dir exists on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          # port: 22
          script: |
            mkdir -p ${{ secrets.SERVER_APP_DIR }}
            chmod 755 ${{ secrets.SERVER_APP_DIR }}
            ls -al ${{ secrets.SERVER_APP_DIR }}

      # 7) 파일 전송 — 상대경로 사용(가장 안정적)
      - name: Copy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.Server_SSH_KEY }}
          # port: 22
          source: |
            deploy/app.jar
            deploy/application-prod.yml
          target: ${{ secrets.SERVER_APP_DIR }}
          overwrite: true
          debug: true

      # 8) 서비스 재시작 및 상태 확인
      - name: Restart service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          # port: 22
          script: |
            set -e
            cd ${{ secrets.SERVER_APP_DIR }}
            sudo systemctl restart ${{ secrets.SERVER_SERVICE }}
            sudo systemctl status  ${{ secrets.SERVER_SERVICE }} --no-pager -l
